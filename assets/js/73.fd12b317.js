(window.webpackJsonp=window.webpackJsonp||[]).push([[73],{850:function(v,_,t){"use strict";t.r(_);var r=t(20),e=Object(r.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h1",{attrs:{id:"监控"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#监控"}},[v._v("#")]),v._v(" 监控")]),v._v(" "),_("p",[v._v("前端监控一般分为三种，分别为页面埋点、性能监控以及异常监控。")]),v._v(" "),_("p",[v._v("这一章节我们将来学习这些监控相关的内容，但是基本不会涉及到代码，只是让大家了解下前端监控该用什么方式实现。毕竟大部分公司都只是使用到了第三方的监控工具，而不是选择自己造轮子。")]),v._v(" "),_("h2",{attrs:{id:"页面埋点"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#页面埋点"}},[v._v("#")]),v._v(" 页面埋点")]),v._v(" "),_("p",[v._v("页面埋点应该是大家最常写的监控了，一般起码会监控以下几个数据：")]),v._v(" "),_("ul",[_("li",[v._v("PV / UV")]),v._v(" "),_("li",[v._v("停留时长")]),v._v(" "),_("li",[v._v("流量来源")]),v._v(" "),_("li",[v._v("用户交互")])]),v._v(" "),_("p",[v._v("对于这几类统计，一般的实现思路大致可以分为两种，分别为手写埋点和无埋点的方式。")]),v._v(" "),_("p",[v._v("相信第一种方式也是大家最常用的方式，可以自主选择需要监控的数据然后在相应的地方写入代码。这种方式的灵活性很大，但是唯一的缺点就是工作量较大，每个需要监控的地方都得插入代码。")]),v._v(" "),_("p",[v._v("另一种无埋点的方式基本不需要开发者手写埋点了，而是统计所有的事件并且定时上报。这种方式虽然没有前一种方式繁琐了，但是因为统计的是所有事件，所以还需要后期过滤出需要的数据。")]),v._v(" "),_("h2",{attrs:{id:"性能监控"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#性能监控"}},[v._v("#")]),v._v(" 性能监控")]),v._v(" "),_("p",[v._v("性能监控可以很好的帮助开发者了解在各种真实环境下，页面的性能情况是如何的。")]),v._v(" "),_("p",[v._v("对于性能监控来说，我们可以直接使用浏览器自带的 "),_("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/API/Performance",target:"_blank",rel:"noopener noreferrer"}},[v._v("Performance API"),_("OutboundLink")],1),v._v(" 来实现这个功能。")]),v._v(" "),_("p",[v._v("对于性能监控来说，其实我们只需要调用 "),_("code",[v._v("performance.getEntriesByType('navigation')")]),v._v(" 这行代码就行了。对，你没看错，一行代码我们就可以获得页面中各种详细的性能相关信息。")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/2/7/168c82d1976cc115?w=444&h=570&f=png&s=97514",alt:""}})]),v._v(" "),_("p",[v._v("我们可以发现这行代码返回了一个数组，内部包含了相当多的信息，从数据开始在网络中传输到页面加载完成都提供了相应的数据。")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/2/7/168c82e5cc721387?w=844&h=284&f=png&s=54415",alt:""}})]),v._v(" "),_("h2",{attrs:{id:"异常监控"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#异常监控"}},[v._v("#")]),v._v(" 异常监控")]),v._v(" "),_("p",[v._v("对于异常监控来说，以下两种监控是必不可少的，分别是代码报错以及接口异常上报。")]),v._v(" "),_("p",[v._v("对于代码运行错误，通常的办法是使用 "),_("code",[v._v("window.onerror")]),v._v(" 拦截报错。该方法能拦截到大部分的详细报错信息，但是也有例外")]),v._v(" "),_("ul",[_("li",[v._v("对于跨域的代码运行错误会显示 "),_("code",[v._v("Script error.")]),v._v(" 对于这种情况我们需要给 "),_("code",[v._v("script")]),v._v(" 标签添加 "),_("code",[v._v("crossorigin")]),v._v(" 属性")]),v._v(" "),_("li",[v._v("对于某些浏览器可能不会显示调用栈信息，这种情况可以通过 "),_("code",[v._v("arguments.callee.caller")]),v._v(" 来做栈递归")])]),v._v(" "),_("p",[v._v("对于异步代码来说，可以使用 "),_("code",[v._v("catch")]),v._v(" 的方式捕获错误。比如 "),_("code",[v._v("Promise")]),v._v(" 可以直接使用 "),_("code",[v._v("catch")]),v._v(" 函数，"),_("code",[v._v("async await")]),v._v(" 可以使用 "),_("code",[v._v("try catch")]),v._v("。")]),v._v(" "),_("p",[v._v("但是要注意线上运行的代码都是压缩过的，需要在打包时生成 sourceMap 文件便于 debug。")]),v._v(" "),_("p",[v._v("对于捕获的错误需要上传给服务器，通常可以通过 "),_("code",[v._v("img")]),v._v(" 标签的 "),_("code",[v._v("src")]),v._v(" 发起一个请求。")]),v._v(" "),_("p",[v._v("另外接口异常就相对来说简单了，可以列举出出错的状态码。一旦出现此类的状态码就可以立即上报出错。接口异常上报可以让开发人员迅速知道有哪些接口出现了大面积的报错，以便迅速修复问题。")])])}),[],!1,null,null,null);_.default=e.exports}}]);