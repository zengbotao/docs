(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{802:function(v,_,t){"use strict";t.r(_);var p=t(20),a=Object(p.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h2",{attrs:{id:"前言"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[v._v("#")]),v._v(" 前言")]),v._v(" "),_("ol",[_("li",[_("p",[v._v("正则表达式")]),v._v(" "),_("p",[v._v("a.  用于提供范围性的校验规则。利用这些规则进行校验、过滤、替换、切割操作")]),v._v(" "),_("p",[v._v("b.  预定义字符、数量词")]),v._v(" "),_("p",[v._v("c.  捕获组：用()括起来的作为一个整体操作的单元。捕获组的编号是从1\n> 开始。从(出现的位置开始依次计算")])]),v._v(" "),_("li",[_("p",[v._v("包装类")]),v._v(" "),_("p",[v._v("a.  针对基本类型提供的类形式")]),v._v(" "),_("p",[v._v("b.  自动封箱：将基本类型直接赋值给对应的引用类型 -> valueOf")]),v._v(" "),_("p",[v._v("c.  自动拆箱：将引用类型字节赋值给对应的基本类型 -> **Value")]),v._v(" "),_("p",[v._v("d.  对于整数的自动封箱，会有范围判断：-128~127，如果在这个范围内，从数组中取值")]),v._v(" "),_("p",[v._v("e.  如果是基本类型和包装类对象进行运算，在底层会自动拆箱")]),v._v(" "),_("p",[v._v("f.  包装类所产生的对象的哈希码在任何环境下都不会改变")])]),v._v(" "),_("li",[_("p",[v._v("数学类")]),v._v(" "),_("p",[v._v("a.  Math：针对基本类型提供了初等数学运算。在运算的时候不保证小数的精确性")]),v._v(" "),_("p",[v._v("b.  BigDecimal：用于精确运算的类。要求参数以字符串形式提供")]),v._v(" "),_("p",[v._v("c.  BigInteger：用于计算超大整数的类")])])]),v._v(" "),_("h2",{attrs:{id:"日期类"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#日期类"}},[v._v("#")]),v._v(" 日期类")]),v._v(" "),_("ol",[_("li",[_("p",[v._v("Date：")]),v._v(" "),_("p",[v._v("a.  在导包的时候用的是java.util包下的")]),v._v(" "),_("p",[v._v("b.  SimpleDateFormat：用于进行"),_("strong",[v._v("字符串和日期之间的转化")]),v._v("。字符串转化\n> 为日期对象:parse；日期对象转化为字符串对象：format")])]),v._v(" "),_("li",[_("p",[v._v("Calendar：")]),v._v(" "),_("p",[v._v("a.  JDK1.2出来用于取代Date的类")])])]),v._v(" "),_("h1",{attrs:{id:"异常"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#异常"}},[v._v("#")]),v._v(" 异常")]),v._v(" "),_("ol",[_("li",[_("p",[v._v("为了反馈和处理/解决问题设计的一套机制")])]),v._v(" "),_("li",[_("p",[v._v("异常的顶级父类是Throwable，有2个子类：Error、Exception")])])]),v._v(" "),_("blockquote",[_("p",[v._v("二、Error")])]),v._v(" "),_("ol",[_("li",[_("p",[v._v("表示严重的错误")])]),v._v(" "),_("li",[_("p",[v._v("出现之后不能处理")])]),v._v(" "),_("li",[_("p",[v._v("出现之后只能尽量优化代码，减少错误出现的几率")])])]),v._v(" "),_("blockquote",[_("p",[v._v("三、Exception")])]),v._v(" "),_("ol",[_("li",[_("p",[v._v("表示在合理的应用程序中出现的可以处理的问题")])]),v._v(" "),_("li",[_("p",[v._v("分类：")])])]),v._v(" "),_("p",[v._v("a.  编译时异常：在编译的时候就出现要求处理的异常")]),v._v(" "),_("blockquote",[_("p",[v._v("CloneNotSupportedException ParseException")])]),v._v(" "),_("p",[v._v("b.  运行时异常：在编译的时候不出现到了运行的时候才会报错。在使用的时候可以处理，如果不处理在运行时会报错\n> ---")]),v._v(" "),_("blockquote",[_("p",[v._v("RuntimeException")]),v._v(" "),_("p",[v._v("NullPointerException ArrayIndexOutOfBoundsException\nArithmeticException ClassCastException StringIndexOutOfBoundsException\nPatternSyntexException NumberFormatException")])]),v._v(" "),_("ol",{attrs:{start:"3"}},[_("li",[_("p",[v._v("异常的处理方式：")]),v._v(" "),_("p",[v._v("a.  继续向上抛出：throws")]),v._v(" "),_("p",[v._v("b.  可以捕获：try-catch")])]),v._v(" "),_("li",[_("p",[v._v("如果在实际开发中，遇到了问题但是在java中没有提供对应的异常，那么自定义异常\n---\n写一个类继承Exception，定义的是一个编译时异常。如果需要定义一个运行时异常，需要继承RuntimeException")])]),v._v(" "),_("li",[_("p",[v._v("异常的捕获方式：")]),v._v(" "),_("p",[v._v("a.  每一个异常分别对应一个catch，适合于每一个异常的处理方式各不一样")]),v._v(" "),_("p",[v._v("b.  如果所有异常的处理方式都一样，那么可以统一捕获一个父类异常对象")]),v._v(" "),_("p",[v._v("c.  如果异常之间的处理方式进行了分组，那么同一组异常之间可以用")])])]),v._v(" "),_("blockquote",[_("p",[v._v("| 隔开 --- JDK1.7开始")])]),v._v(" "),_("ol",{attrs:{start:"6"}},[_("li",[_("p",[v._v("异常对方法的重载没有影响")])]),v._v(" "),_("li",[_("p",[v._v("在方法重写的时候，子类中重写的方法抛出的编译时异常不能超过父类方法抛出的编译时异常的范围\n-> 子类不能抛出比父类更多的异常")])]),v._v(" "),_("li",[_("p",[v._v("finally：无论前边的代码执行成功与否，finally中的代码都会执行一次")])]),v._v(" "),_("li",[_("p",[v._v("当项目处在开发期间，如果项目中出现了异常，打印这个异常的栈轨\n迹，然后根据这个轨迹进行调错；如果项目已经上线，出现了异常，记录错误日志")])])]),v._v(" "),_("h1",{attrs:{id:"集合"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#集合"}},[v._v("#")]),v._v(" 集合")]),v._v(" "),_("ol",[_("li",[_("p",[v._v("一个容器：存储多个数据，但是不限长")])]),v._v(" "),_("li",[_("p",[v._v("顶级接口Collection<E>")])]),v._v(" "),_("li",[_("p",[v._v("<E> - 泛型 -")]),v._v(" "),_("blockquote",[_("p",[v._v("在集合中的所用是用于限定集合中存储的元素的类型。注意，由于泛型的限制，集合中只能存储"),_("strong",[v._v("对象")])])])])])])}),[],!1,null,null,null);_.default=a.exports}}]);