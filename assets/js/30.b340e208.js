(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{800:function(n,v,t){"use strict";t.r(v);var _=t(20),i=Object(_.a)({},(function(){var n=this,v=n._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[v("h2",{attrs:{id:"前言"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[n._v("#")]),n._v(" 前言")]),n._v(" "),v("ol",[v("li",[v("p",[n._v("Object：")]),n._v(" "),v("p",[n._v("a.  是java中的顶级父类，也是java中唯一一个没有父类的类")]),n._v(" "),v("p",[n._v("b.  重要方法：")]),n._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",[v("code",[n._v("i.  clone -\n    > 克隆出一个新的对象。新对象的属性值和原对象是一致的，但是地址是不一样的。需要在方法上抛出Exception；需要被克隆的对象所对应的类必须实现Cloneable\n\nii. finalize - 通知GC进行回收，实际上只是调用GC进行堆内存的扫描\n\niii. hashCode -\n     > 计算对象的哈希码。人为的认为不同对象的哈希码是不一样的\n\niv. toString - 将对象转化为字符串形式。当打印一个对象的时候，\n    > 最底层实际上就是调用了toString方法\n\nv.  getClass - 获取对象的实际类型\n\nvi. equals -\n    > 判断两个对象是否相等。默认是判断两个对象的地址是否一致。实际开发中往往需要重写这个方法。重写步骤：\n\n    1.  判断地址是否一致\n\n    2.  判断参数是否为空\n\n    3.  判断类型是否一致\n\n    4.  需要将参数进行强制转换，判断属性值是否一致\n")])])])])]),n._v(" "),v("h2",{attrs:{id:"string"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#string"}},[n._v("#")]),n._v(" String")]),n._v(" "),v("blockquote",[v("p",[n._v("一、概述")])]),n._v(" "),v("ol",[v("li",[v("p",[n._v("String代表字符串的类，是一个最终类")])]),n._v(" "),v("li",[v("p",[n._v("字符串在内存中是以字符数组的形式来存储")])]),n._v(" "),v("li",[v("p",[n._v("因为字符串是常量，所以本身是存储在方法区的常量池中。只要字符串")]),n._v(" "),v("blockquote",[v("p",[n._v("的实际值一样，那么用的就是同一个字符串 ->\n字符串是一个常量，字符串是被共享的")])])]),n._v(" "),v("li",[v("p",[n._v("如果需要拼接过个字符串，建议使用StringBuilder")])]),n._v(" "),v("li",[v("p",[n._v("String类中，提供了一系列的操作字符串但是不改变原字符串的方法，都是产生一个新的字符串")])])]),n._v(" "),v("blockquote",[v("p",[n._v("正则表达式- REGEX\n一、概念")]),n._v(" "),v("p",[n._v("为字符串提供一系列的"),v("strong",[n._v("校验")]),n._v("规则 - 提供"),v("strong",[n._v("范围性")]),n._v("的校验二、预定义字符")]),n._v(" "),v("p",[n._v("三、数量词")])]),n._v(" "),v("p",[n._v("+--------------+-------------------------------------------------------+\n| 字符         | > 含义                                                |\n+==============+=======================================================+\n| +           | > 至少出现一次：x>=1                                 |\n+--------------+-------------------------------------------------------+\n| *           | > 可以出现：x>=0                                     |\n+--------------+-------------------------------------------------------+\n| ?            | > 至多一次：x<=1                                     |\n+--------------+-------------------------------------------------------+\n| {n}          | > 恰好n次：x=n                                        |\n+--------------+-------------------------------------------------------+\n| {n,}         | > 至少n次：x>=n                                      |\n+--------------+-------------------------------------------------------+\n| {n,m}        | > n到m次：n<=x<=m                                   |\n+--------------+-------------------------------------------------------+")]),n._v(" "),v("blockquote",[v("p",[n._v("四、练习")])]),n._v(" "),v("ol",[v("li",[v("p",[n._v("输入一个字符串，判断字符串是否能够转化为小数")])]),n._v(" "),v("li",[v("p",[n._v("输入一个字符串表示密码：8-12位，至少由大写字母/小写字母/数字/")]),n._v(" "),v("blockquote",[v("p",[n._v("空格中的两种构成")])])])])])}),[],!1,null,null,null);v.default=i.exports}}]);