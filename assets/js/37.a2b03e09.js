(window.webpackJsonp=window.webpackJsonp||[]).push([[37],{807:function(v,_,n){"use strict";n.r(_);var e=n(20),t=Object(e.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h1",{attrs:{id:"前言"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[v._v("#")]),v._v(" 前言")]),v._v(" "),_("ol",[_("li",[_("p",[v._v("IO：")]),v._v(" "),_("p",[v._v("a.  概述")]),v._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",[_("code",[v._v("i.  用于数据的传输\n\nii. 方向：输入流、输出流；形式：字节流、字符流\n\niii. 四个基本流都是抽象类\n\niv. 数据的来源/目的地：磁盘、内存、网络、外设\n")])])]),_("p",[v._v("b.  流中的异常处理")]),v._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",[_("code",[v._v("i.  需要将关流的操作放到finally\n\nii. 需要将流对象放在try之外声明并赋值为null，放在try之内进行实际的初始化\n\niii. 在关流之前需要判断流对象是否初始化成功\n\niv. 在关流之后需要将流对象置为null\n\nv.  如果有缓冲区，那么在关流之前需要手动进行一次flush\n")])])]),_("p",[v._v("c.  文件字符流")]),v._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",[_("code",[v._v("i.  FileReader：没有缓冲区，可以单个字符的读取，也可以自定义缓冲区 - 字符数组\n\nii. FileWriter：自带缓冲区，数据是先写到缓冲区中，然后从缓冲区中写到文件中\n")])])]),_("p",[v._v("d.  缓冲流")]),v._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",[_("code",[v._v("i.  BufferedReader：本身提供了缓冲区，需要从其他的字符输入流中来获取数据\n\nii. BufferedWriter：提供了更大的缓冲区。另外，提供了newLine方法用于换行\n")])])]),_("p",[v._v("e.  文件字节流")]),v._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",[_("code",[v._v("i.  FileInputStream - 输入，FileOutputStream - 输出\n\nii. 没有缓冲区，因此不需要进行flush操作\n")])])])])]),v._v(" "),_("h1",{attrs:{id:"io-2"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#io-2"}},[v._v("#")]),v._v(" IO(2)")]),v._v(" "),_("p",[v._v("一、转换流")]),v._v(" "),_("ol",[_("li",[_("p",[v._v("是字符和字节之间进行转换的流")])]),v._v(" "),_("li",[_("p",[v._v("转换输出流 - OutputStreamWriter - 将字符流转化为字节流")])]),v._v(" "),_("li",[_("p",[v._v("转换输入流 - InputStreamReader - 将字节流转化为字符流")])]),v._v(" "),_("li",[_("p",[v._v("转换流是字符流")])])]),v._v(" "),_("p",[v._v("二、系统流/标准流")]),v._v(" "),_("ol",[_("li",[_("p",[v._v("系统流对应的不是类而是对象")])]),v._v(" "),_("li",[_("p",[v._v("分类")])])]),v._v(" "),_("p",[v._v("+---------------------------------+------------------------------------+\n| 对象                            | > 解释                             |\n+=================================+====================================+\n| System.in                       | > 标准输入流                       |\n+---------------------------------+------------------------------------+\n| System.out                      | > 标准输出流                       |\n+---------------------------------+------------------------------------+\n| System.err                      | > 标准错误流                       |\n+---------------------------------+------------------------------------+")]),v._v(" "),_("ol",{attrs:{start:"3"}},[_("li",[_("p",[v._v("系统流都是字节流")])]),v._v(" "),_("li",[_("p",[v._v("系统流在使用的时候不用关闭")])]),v._v(" "),_("li",[_("p",[v._v("练习：利用学习的流来从控制台获取一行数据")])])]),v._v(" "),_("p",[v._v("三、打印流")]),v._v(" "),_("ol",[_("li",[_("p",[v._v("PrintStream - 打印字节流，PrintWriter - 打印字符流")])]),v._v(" "),_("li",[_("p",[v._v("只有输出流没有输入流")])]),v._v(" "),_("li",[_("p",[v._v("提供了便捷的打印方法，并且可以便捷的进行换行操作")])])]),v._v(" "),_("p",[v._v("四、合并流")]),v._v(" "),_("ol",[_("li",[_("p",[v._v("用于将多个字节流合并成一个字节流的流")])]),v._v(" "),_("li",[_("p",[v._v("SequenceInputStream - 在构建的时候需要将多个要合并的字节流放入一个")])])]),v._v(" "),_("p",[v._v("Enumeration中来进行")]),v._v(" "),_("ol",{attrs:{start:"3"}},[_("li",[v._v("合并流只有输入流没有输出流")])]),v._v(" "),_("p",[v._v("五、序列化/反序列化流")]),v._v(" "),_("ol",[_("li",[_("p",[v._v("序列化：将对象转化为字节数组的过程")])]),v._v(" "),_("li",[_("p",[v._v("反序列化：将字节数组还原回对象的过程")])]),v._v(" "),_("li",[_("p",[v._v("注意问题：")]),v._v(" "),_("p",[v._v("a.  如果一个对象要想被序列化，那么这个对象对应的类必须实现接口")])])]),v._v(" "),_("blockquote",[_("p",[v._v("Serializable - 这个接口中没有任何的属性和方法，仅仅作为标记使用")])]),v._v(" "),_("p",[v._v("b.  被static/transient修饰的属性不会进行序列化")]),v._v(" "),_("p",[v._v("c.  一个类如果允许被序列化，那么这个类中会产生一个版本号 -\n> serialVersionUID。如果这个类中，没有手动指定版本号，那么在编译的时候自动根据当前类中的属性和方法计算一个版本号，也就意味着如果类中的属性产生改变，则会重新计算一个新的版本号。如果手动指定了版本号，那么不再计算版本号了。在对象序列化的时候，版本号会随着对象一起序列化出去，而在反序列化的时候，拿着对象中的版本号和类中的版本号进行比较。如果版本号一致，则允许反序列\n> 化；如果版本号不一致，则抛出InvalidClassException。版本号的意义是为了防止类产生改动导致已经序列化出去的对象无法反序列化回\n> 来。注意版本号必须用static final修饰，本身必须是long类型、")]),v._v(" "),_("p",[v._v("d.  集合允许被整体序列化 - 集合及其中的元素会一起序列化出去")]),v._v(" "),_("p",[v._v("扩展：")]),v._v(" "),_("p",[v._v("根据流的功能：节点流和处理流")]),v._v(" "),_("p",[v._v("节点流：直接从数据源进行数据的读写 - FileWriter")]),v._v(" "),_("p",[v._v("处理流：封装其他的流，来提供增强的功能 - BufferedReader")]),v._v(" "),_("p",[v._v("六、总结")]),v._v(" "),_("p",[v._v("+-------------------+------------------+-----+------------------------+\n| > 流              | 类型             | 缓  | 作用                   |\n|                   |                  | 冲  |                        |\n|                   |                  | 区  |                        |\n+===================+==================+=====+========================+\n| > FileWriter      | 字符流           | 有  | 1.  以                 |\n|                   | 、输出流、节点流 |     | 字符形式向文件中写数据 |\n|                   |                  |     |                        |\n|                   |                  |     | 2.  继承了             |\n|                   |                  |     |                        |\n|                   |                  |     | > OutputStreamWriter   |\n+===================+==================+=====+========================+\n| > FileReader      | 字符流           | 无  | 1.  以字               |\n|                   | 、输入流、节点流 |     | 符形式从文件中读取数据 |\n|                   |                  |     |                        |\n|                   |                  |     | 2.  继承了             |\n|                   |                  |     |                        |\n|                   |                  |     | > InputStreamReader    |\n+-------------------+------------------+-----+------------------------+\n| > BufferedReader  | 字符流           | 有  | 1.  需要以其他字       |\n|                   | 、输入流、处理流 |     | 符输入流来构建当前的流 |\n|                   |                  |     |                        |\n|                   |                  |     | 2.  提供了缓冲区       |\n+-------------------+------------------+-----+------------------------+\n| > BufferedWriter  | 字符流           | 有  | 1.  需要以其他字       |\n|                   | 、输出流、处理流 |     | 符输出流来构建当前的流 |\n|                   |                  |     |                        |\n|                   |                  |     | 2.  提供了更大的缓冲区 |\n|                   |                  |     |                        |\n|                   |                  |     | 3.  提供了换行操作 -   |\n|                   |                  |     |     newLine            |\n+-------------------+------------------+-----+------------------------+\n| > FileInputStream | 字节流           | 无  | 以字                   |\n|                   | 、输入流、节点流 |     | 节形式从文件中读取数据 |\n+-------------------+------------------+-----+------------------------+\n| >                 | 字节流           | 无  | 以                     |\n|  FileOutputStream | 、输出流、节点流 |     | 字节形式向文件中写数据 |\n+-------------------+------------------+-----+------------------------+\n| > O               | 字符流           | 有  | 1.  需要以其他的字     |\n| utputStreamWriter | 、输出流、处理流 |     | 节输出流来构建当前的流 |\n|                   |                  |     |                        |\n|                   |                  |     | 2.  将字符转化为字节   |\n+-------------------+------------------+-----+------------------------+\n| >                 | 字符流           | 无  | 1.  需要以其他的字     |\n| InputStreamReader | 、输入流、处理流 |     | 节输入流来构建当前的流 |\n|                   |                  |     |                        |\n|                   |                  |     | 2.  将字节转化为字符   |\n+-------------------+------------------+-----+------------------------+\n| > PrintStream     | 字节流、输出流   | 无  | 提供                   |\n|                   | 、节点流、处理流 |     | 了便捷的打印和换行操作 |\n+-------------------+------------------+-----+------------------------+")]),v._v(" "),_("p",[v._v("+-------------------+------------------+-----+------------------------+\n| > PrintWriter     | 字符流、输出流   | 有  | 提供                   |\n|                   | 、节点流、处理流 |     | 了便捷的打印和换行操作 |\n+===================+==================+=====+========================+\n| > Se              | 字节流           | 无  | 1.  在构建的时候需要传 |\n| quenceInputStream | 、输入流、处理流 |     | 入一个Enumeration对象  |\n|                   |                  |     |                        |\n|                   |                  |     | 2.  将多个字节输入     |\n|                   |                  |     | 流合并成一个字节输入流 |\n+-------------------+------------------+-----+------------------------+\n| >                 | 字节流           | 无  | 1.  需要传入其他的字   |\n| ObjectInputStream | 、输入流、处理流 |     | 节输入流来构建当前的流 |\n|                   |                  |     |                        |\n|                   |                  |     | 2.  将字节转化为对象   |\n+-------------------+------------------+-----+------------------------+\n| > O               | 字节流           | 无  | 1.  需要传入其他的字   |\n| bjectOutputStream | 、输出流、处理流 |     | 节输出流来构建当前的流 |\n|                   |                  |     |                        |\n|                   |                  |     | 2.  将对象转化为字节   |\n+-------------------+------------------+-----+------------------------+")]),v._v(" "),_("h1",{attrs:{id:"randomaccessfile"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#randomaccessfile"}},[v._v("#")]),v._v(" RandomAccessFile")]),v._v(" "),_("ol",[_("li",[_("p",[v._v("支持对文件进行读写的流，可以认为这是一个双向流")])]),v._v(" "),_("li",[_("p",[v._v("在操作文件的时候，将文件看做了一个大型的"),_("strong",[v._v("字节数组")])])]),v._v(" "),_("li",[_("p",[v._v("在使用的时候需要指定模式：")]),v._v(" "),_("p",[v._v("a.  r - 只读模式")]),v._v(" "),_("p",[v._v("b.  rw - 读写模式")]),v._v(" "),_("p",[v._v("c.  rws -读写模式，但是要求将每次的操作都得保存到磁盘上，所以这种方式的效率较低")])])]),v._v(" "),_("blockquote",[_("p",[v._v("Properties")])]),v._v(" "),_("ol",[_("li",[_("p",[v._v("是一个可以持久化（实际上是一种特殊的序列化，将对象转化为字节数组，当将字节数组存储到磁盘上的时候就称之为持久化）的"),_("strong",[v._v("映射")])])]),v._v(" "),_("li",[_("p",[v._v("键和值的类型只能是String")])]),v._v(" "),_("li",[_("p",[v._v("Properties对象在序列化的时候只能序列化到properties文件中")])]),v._v(" "),_("li",[_("p",[v._v("properties文件中，注释是使用的")])]),v._v(" "),_("li",[_("p",[v._v("properties的默认编码是ISO-8859-1，不兼容中文；如果向properties文件中添加中文的时候，这个中文就会自动转化为其对应的utf-16的编码形式")])]),v._v(" "),_("li",[_("p",[v._v("用于序列化的方法是store，用于反序列化的方法是load")])]),v._v(" "),_("li",[_("p",[v._v("在Properties提供了遍历映射的方式：list(PrintStream)")])]),v._v(" "),_("li",[_("p",[v._v("作为配置文件来使用")])])]),v._v(" "),_("h1",{attrs:{id:"其他"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#其他"}},[v._v("#")]),v._v(" 其他")]),v._v(" "),_("p",[v._v("一、断言")]),v._v(" "),_("ol",[_("li",[_("p",[v._v("根据之前的条件来对后续的结果进行预判")])]),v._v(" "),_("li",[_("p",[v._v("在java中，断言默认是不开启，需要进行手动开启，添加参数-ea")])]),v._v(" "),_("li",[_("p",[v._v("格式：assert 判断条件; 或者 assert 判断条件 : 提示信息;")])])]),v._v(" "),_("p",[v._v("二、单元测试")]),v._v(" "),_("ol",[_("li",[_("p",[v._v("在需要测试的方法之上添加注解@Test")])]),v._v(" "),_("li",[_("p",[v._v("三无：")]),v._v(" "),_("p",[v._v("a.  要求被测试的方法没有参数")]),v._v(" "),_("p",[v._v("b.  要求被测试的方法没有返回值 --- 返回值类型必须是void")]),v._v(" "),_("p",[v._v("c.  要求被测试的方法必须是非静态方法")])]),v._v(" "),_("li",[_("p",[v._v("@Before表示在测试方法之前执行，一般用于进行初始化操作")])]),v._v(" "),_("li",[_("p",[v._v("@After表示在测试方法之后执行，一般拥有进行资源的销毁和回收")])])]),v._v(" "),_("p",[v._v("三、JDK1.5的部分特性")]),v._v(" "),_("p",[v._v("自动封箱/拆箱、增强for循环、泛型、静态导包、可变参数、枚举、反射、动态代理、内省、注解...")]),v._v(" "),_("blockquote",[_("p",[v._v("静态导包")])]),v._v(" "),_("ol",[_("li",[_("p",[v._v("格式： import static 包名.类名.静态方法名;")])]),v._v(" "),_("li",[_("p",[v._v("优点：能够优先加载指定的方法，提高效率")])]),v._v(" "),_("li",[_("p",[v._v("缺点：")]),v._v(" "),_("p",[v._v("a.  书写比较麻烦")]),v._v(" "),_("p",[v._v("b.  降低了代码的可读性")]),v._v(" "),_("p",[v._v("c.  如果在本类中存在方法签名一致的方法，则导包无效")])])]),v._v(" "),_("p",[v._v("扩展：JDK1.8的部分特性")]),v._v(" "),_("p",[v._v("Lambda表达式、函数式接口、接口中的实体方法、方法的传递、有效常量、")]),v._v(" "),_("p",[v._v("元注解、时间包...")])])}),[],!1,null,null,null);_.default=t.exports}}]);