(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{793:function(v,_,t){"use strict";t.r(_);var a=t(20),e=Object(a.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h2",{attrs:{id:"运算符"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#运算符"}},[v._v("#")]),v._v(" 运算符")]),v._v(" "),_("h3",{attrs:{id:"算术运算符"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#算术运算符"}},[v._v("#")]),v._v(" 算术运算符")]),v._v(" "),_("p",[v._v("+ - * / % ++ --")]),v._v(" "),_("p",[v._v("注意问题：")]),v._v(" "),_("ol",[_("li",[_("p",[v._v("byte/short/char在运算的时候会自动提升为int")])]),v._v(" "),_("li",[_("p",[v._v("整数的运算结果一定是整数")])]),v._v(" "),_("li",[_("p",[v._v("小数的存储和计算都是不精确的")])]),v._v(" "),_("li",[_("p",[v._v("/0")])]),v._v(" "),_("li",[_("p",[v._v("%的计算结果的符号和左边数字的符号有关")])]),v._v(" "),_("li",[_("p",[v._v("++/--，如果在变量之前，要求是先自增，然后取出自增之后的值运算。如果是在变量之后，是先取出值参与运算，然后再自增")])]),v._v(" "),_("li",[_("p",[v._v("byte/short/char都可以参与++/--运算，并且结果类型不会发生改变。底层在运算的时候依然是将byte/short/char提升为int，但是最后的结果在底层会自动做一次强转")])])]),v._v(" "),_("p",[v._v("byte b1 = 3, b2 = 5, b3;")]),v._v(" "),_("p",[v._v("b3 = b1 + b2; --- false --- 因为byte运算会自动提升为int")]),v._v(" "),_("p",[v._v("byte b = 3;")]),v._v(" "),_("p",[v._v("b = b + 5; --- false --- 因为b是byte，依然会提升为int ---\nb是变量，那么就意味着在编译的时候无法确定b的具体大小，所以就存在运算结果超过范围的问题，因此底层会将运算结果自动提升为int")]),v._v(" "),_("p",[v._v("byte b = 3 + 5; --- true ---\n3和5都是字面量，所以在编译的时候能确定值得具体大小，就能判断出是否超过byte的取值范围")]),v._v(" "),_("p",[v._v("byte b = 123 + 5; --- false --- 超过范围")]),v._v(" "),_("h3",{attrs:{id:"赋值运算"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#赋值运算"}},[v._v("#")]),v._v(" 赋值运算")]),v._v(" "),_("p",[v._v("= += -= *= /= %= &= |= ^= <<= >>= >>>=")]),v._v(" "),_("p",[v._v("int i = 5;")]),v._v(" "),_("p",[v._v("i += 3; --- 实际上是在自己本身基础上加上指定的数字")]),v._v(" "),_("p",[v._v("int i = 10;")]),v._v(" "),_("p",[v._v("i %= 3; -> i = i % 3;--- i的值是1")]),v._v(" "),_("p",[v._v("注意：在java中，不支持变量的连等定义，但是支持连等赋值")]),v._v(" "),_("p",[v._v("int i = 5;")]),v._v(" "),_("p",[v._v("i += i -= i *= 3; --- i的值是多少？ -5")]),v._v(" "),_("p",[v._v("i = 5 + (5 - (5 * 3)); -> -5")]),v._v(" "),_("p",[v._v("int i = 5;")]),v._v(" "),_("p",[v._v("i += i -= i *= ++i; -> -20")]),v._v(" "),_("h3",{attrs:{id:"关系运算符"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#关系运算符"}},[v._v("#")]),v._v(" 关系运算符")]),v._v(" "),_("p",[v._v("> < >= <= == 相等 != 不等")]),v._v(" "),_("h3",{attrs:{id:"逻辑运算符"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#逻辑运算符"}},[v._v("#")]),v._v(" 逻辑运算符")]),v._v(" "),_("p",[v._v("针对布尔值来进行运算的")]),v._v(" "),_("p",[v._v("& - And - 与 | - Or - 或 ^ - Xor - 异或 ! - Not - 非 && - 短路与\n|| - 短路或")]),v._v(" "),_("p",[_("strong",[v._v("运算规则")])]),v._v(" "),_("p",[v._v("true&true=true true&false=false false&true=false false&false=false")]),v._v(" "),_("p",[v._v("true|true=true true|false=true false|true=true false|false=false")]),v._v(" "),_("p",[v._v("true^true=false true^false=true false^true=true false^false=false")]),v._v(" "),_("p",[v._v("!true=false !false=true")]),v._v(" "),_("p",[v._v("&& -\n运算规则和&是一样的。如果&&前边的表达式的结果为false，则&&后边的表达式不再运算，整个表达式的结果确定是false")]),v._v(" "),_("p",[v._v("|| -\n运算规则和|是一样的。如果||浅表的表达式的结果为true，则||后边的表达式不再运算，整个表达式的结果确定是true")]),v._v(" "),_("p",[v._v("||会短路掉后边的所有的运算，但是&&只短路自己紧跟的表达式")]),v._v(" "),_("h3",{attrs:{id:"位运算符"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#位运算符"}},[v._v("#")]),v._v(" 位运算符")]),v._v(" "),_("p",[v._v("注意：位运算针对整数的补码进行的运算")]),v._v(" "),_("p",[v._v("& 与 | 或 ^ 异或 << 左移 >> 右移 >>> 无符号右移 ~ 取反")]),v._v(" "),_("p",[_("strong",[v._v("交换值的方式：")])]),v._v(" "),_("p",[v._v("int x = 7, y = 10;")]),v._v(" "),_("p",[v._v("方式一：追尾法")]),v._v(" "),_("p",[v._v("int temp = x;")]),v._v(" "),_("p",[v._v("x = y;")]),v._v(" "),_("p",[v._v("y = temp;")]),v._v(" "),_("p",[v._v("方式二：加减法")]),v._v(" "),_("p",[v._v("x = x + y;")]),v._v(" "),_("p",[v._v("y = x - y; -> y = x + y - y; -> y = x;")]),v._v(" "),_("p",[v._v("x = x - y; -> x = x + y - x; -> x = y;")]),v._v(" "),_("p",[v._v("方式三：异或法")]),v._v(" "),_("p",[v._v("x = x ^ y;")]),v._v(" "),_("p",[v._v("y = x ^ y; -> y = x ^ y ^ y; -> y = x;")]),v._v(" "),_("p",[v._v("x = x ^ y; -> x = x ^ y ^ x; -> x = y;")]),v._v(" "),_("p",[v._v("效率最高的是异或法，但是使用最多的是追尾法。追尾法的适用范围是最广的。")]),v._v(" "),_("p",[_("img",{attrs:{src:"media/image3.png",alt:""}}),v._v('{width="5.317361111111111in"\nheight="2.0506944444444444in"}')]),v._v(" "),_("p",[v._v(">>>：先将数字转化为补码形式，然后按照指定的位数向右移动，高位次空出，无论正负，一律补0。对于正数而言，右移和无符号右移没有差别的")]),v._v(" "),_("p",[_("img",{attrs:{src:"media/image4.png",alt:""}}),v._v('{width="5.372222222222222in"\nheight="0.8840277777777777in"}')]),v._v(" "),_("h3",{attrs:{id:"三元运算符"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#三元运算符"}},[v._v("#")]),v._v(" 三元运算符")]),v._v(" "),_("p",[v._v("格式：逻辑值?表达式1:表达式2")]),v._v(" "),_("p",[v._v("执行顺序：先执行逻辑值，如果逻辑值为true，则执行表达式1；反之，则执行表达式2")]),v._v(" "),_("p",[v._v("int i = 3, j = 5;")]),v._v(" "),_("p",[v._v("int max = i > j ? i : j;")]),v._v(" "),_("p",[v._v("int i = 5;")]),v._v(" "),_("p",[v._v('System.out.println(i % 2 == 1 ? "是奇数" : "是偶数");')]),v._v(" "),_("p",[v._v("三元表达式本身也可以形成嵌套 --- 例子：求三个数的最大值")]),v._v(" "),_("p",[v._v("方式一:")]),v._v(" "),_("p",[v._v("int max = i > j ? (i > k ? i : k):(j > k ? j : k);")]),v._v(" "),_("p",[v._v("方式二：")]),v._v(" "),_("p",[v._v("int max = i > j ? i : j;")]),v._v(" "),_("p",[v._v("max = max > k ? max : k;")]),v._v(" "),_("p",[v._v("注意，三元表达式要求表达式1和表达式2的计算结果的类型要一致")]),v._v(" "),_("p",[v._v("double d = a > b ? 3 : 3.5;")]),v._v(" "),_("p",[v._v("float f = a > b ? 'a' : 7.5f;")]),v._v(" "),_("p",[v._v("a > b ? \"abc\" : 'a'; --- false")]),v._v(" "),_("p",[v._v('String str = "abc";')]),v._v(" "),_("p",[v._v("char c = 'a';")]),v._v(" "),_("p",[v._v("练习：定义一个变量表示分数，输出这个分数所对应的等级 score >= 80 -> A\nscore >= 60 -> B score < 60 -> C")]),v._v(" "),_("h3",{attrs:{id:"运算符优先级"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#运算符优先级"}},[v._v("#")]),v._v(" 运算符优先级")]),v._v(" "),_("p",[v._v("() ++ -- ~ ! 算术 << >> >>> 关系 逻辑 & | ^ 三元 赋值")]),v._v(" "),_("p",[v._v("一元>二元>三元")]),v._v(" "),_("h2",{attrs:{id:"流程控制"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#流程控制"}},[v._v("#")]),v._v(" 流程控制")]),v._v(" "),_("p",[v._v("顺序结构：指的是的程序是从左到右从上到下来依次编译运行的")]),v._v(" "),_("h3",{attrs:{id:"分支结构"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#分支结构"}},[v._v("#")]),v._v(" 分支结构")]),v._v(" "),_("p",[v._v("判断结构")]),v._v(" "),_("p",[v._v("if(逻辑值){")]),v._v(" "),_("p",[v._v("代码块;")]),v._v(" "),_("p",[v._v("}")]),v._v(" "),_("p",[_("img",{attrs:{src:"media/image5.png",alt:""}}),v._v('{width="2.3333333333333335in"\nheight="1.9506944444444445in"}')]),v._v(" "),_("p",[v._v("if(逻辑值){")]),v._v(" "),_("p",[v._v("Code1;")]),v._v(" "),_("p",[v._v("} else {")]),v._v(" "),_("p",[v._v("Code2;")]),v._v(" "),_("p",[v._v("}")]),v._v(" "),_("p",[_("img",{attrs:{src:"media/image6.png",alt:""}}),v._v('{width="3.826388888888889in" height="1.45in"}')]),v._v(" "),_("p",[v._v("练习:")]),v._v(" "),_("ol",[_("li",[_("p",[v._v("输入三个数字，获取最小值")])]),v._v(" "),_("li",[_("p",[v._v("输入一个数字表示年份，输出一年是否是闰年：如果不是百年，则被4整除；如果是百年，则需要被400整除")]),v._v(" "),_("p",[v._v("if-else-if结构实际上可以被if-else的嵌套来取代，只是if-else-if结构看起来更加清晰")])])]),v._v(" "),_("p",[v._v("练习：")]),v._v(" "),_("ol",[_("li",[_("p",[v._v("输入一个数字表示月份，输出月份所表示的季")]),v._v(" "),_("p",[v._v("3~5-Spring 6~8-Summer 9~11-Autumn 12/1/2-Winter")])]),v._v(" "),_("li",[_("p",[v._v("输入一个数字表示星期，然后输出这个星期所对应的英文")]),v._v(" "),_("p",[v._v("1-Monday 2-Tuesday 3-Wednesday 4-Thursday 5-Friday 6-Saturday\n7-Sunday")])])])])}),[],!1,null,null,null);_.default=e.exports}}]);